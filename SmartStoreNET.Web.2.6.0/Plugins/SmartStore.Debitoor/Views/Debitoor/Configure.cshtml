@model DebitoorConfigModel
@using SmartStore.Debitoor;
@using SmartStore.Debitoor.Models;
@using SmartStore.Web.Framework;
@using SmartStore.Web.Framework.Plugins;
@using SmartStore.Web.Framework.UI;

@{
	Layout = "";

	Html.AddCssFileParts(true, Url.Content("~/Plugins/SmartStore.Debitoor/Content/smartstore.debitoor.css"));
	Html.AddScriptParts(true, Url.Content("~/Plugins/SmartStore.Debitoor/Scripts/smartstore.debitoor.js"));
}

<div class="debitoor-info">
	<div>
		<p>
			<img class="img-invoice" src="@Url.Content("~/Plugins/SmartStore.Debitoor/Content/images/invoice.png")" alt="" />
		</p>
		@Html.Raw(@T("Plugins.Admin.Debitoor.AdminInformationInvoice"))
	</div>
	<div>
		@Html.Raw(@T("Plugins.Admin.Debitoor.AdminInformationAccounting"))
		<p>
			<img class="img-calc" src="@Url.Content("~/Plugins/SmartStore.Debitoor/Content/images/calc.png")" alt="" />
		</p>
	</div>
	<img class="img-logo" src="@Url.Content("~/Plugins/SmartStore.Debitoor/Content/images/logo.png")" alt="Debitoor" />
</div>

<div class="clear"></div>

<div class="debitoor-instructions alert alert-info">
    @Html.Raw(@T("Plugins.Admin.Debitoor.AdminInstruction"))
</div>

<div class="clear"></div>

@Html.Action("StoreScopeConfiguration", "Setting", new { area = "Admin" })

@Html.ValidationSummary(false)

<div class="clear"></div>

@using (Html.BeginForm())
{
    <table id="DebitoorConfigTable" class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.IsActive)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.IsActive)
                @Html.ValidationMessageFor(model => model.IsActive)
            </td>
        </tr>
		<tr>
			<td colspan="2">
				<div class="admin-config-group">
					<div class="title">
						@T("Plugins.Admin.Debitoor.ConfigGroupAccessData")
					</div>
				</div>
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.CallbackUrl)
			</td>
			<td class="adminData">
				@Html.DisplayFor(model => model.CallbackUrl)
			</td>
		</tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.ClientId)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.ClientId)
                @Html.ValidationMessageFor(model => model.ClientId)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.ClientSecret)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.ClientSecret)
                @Html.ValidationMessageFor(model => model.ClientSecret)
            </td>
        </tr>
		@if (Model.ClientId.HasValue() && Model.ClientSecret.HasValue())
		{
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.Token)
				</td>
				<td class="adminData">
					@Html.SettingEditorFor(model => model.Token)

					<a href="@Model.CreateTokenUrl" class="btn btn-warning">
						<i class="fa fa-gear"></i>&nbsp;@T("Plugins.Admin.Debitoor.ButtonCreateToken")
					</a>

					@Html.ValidationMessageFor(model => model.Token)
				</td>
			</tr>
		}			
		@if (Model.TokenCreation.HasValue)
		{
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.TokenCreation)
				</td>
				<td class="adminData">
					@Html.DisplayFor(model => model.TokenCreation)
				</td>
			</tr>
		}
				
		@if (Model.Token.HasValue())
		{
			<tr class="adminSeparator">
				<td colspan="2">
					<div class="admin-config-group">
						<div class="title">@T("Plugins.Admin.Debitoor.ConfigGroupProductionData")</div>
					</div>
				</td>
			</tr>
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.PaymentTermsId)
				</td>
				<td class="adminData">
					@Html.SettingOverrideCheckbox(model => model.PaymentTermsId)
					@Html.DropDownListFor(model => model.PaymentTermsId, Model.AvailablePaymentTerms)
					@Html.ValidationMessageFor(model => model.PaymentTermsId)
				</td>
			</tr>
			<tr id="DebitoorPaymentTermsDays">
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.CustomPaymentTermsDays)
				</td>
				<td class="adminData">
					@Html.SettingEditorFor(model => model.CustomPaymentTermsDays)
					@Html.ValidationMessageFor(model => model.CustomPaymentTermsDays)
					
					<input type="hidden" name="PaymentTermsIdWithDayInput" value="@Model.PaymentTermsIdWithDayInput" />
				</td>
			</tr>
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.UnitIdProduct)
				</td>
				<td class="adminData">
					@Html.SettingOverrideCheckbox(model => model.UnitIdProduct)
					@Html.DropDownListFor(model => model.UnitIdProduct, Model.AvailableUnits)
					@Html.ValidationMessageFor(model => model.UnitIdProduct)
				</td>
			</tr>
			if (Model.MappingRecords > 0)
			{
				<tr>
					<td class="adminTitle">
						@Html.SmartLabelFor(model => model.MappingRecords)
					</td>
					<td class="adminData">
						@Html.DisplayFor(model => model.MappingRecords)
					</td>
				</tr>
			}
			<tr>
				<td class="adminTitle">&nbsp;</td>
				<td class="adminData">
					<button type="submit" name="refreshDebitoorConfigData" value="refreshDebitoorConfigData" class="btn" title="@T("Plugins.Admin.Debitoor.ButtonRefreshDebitoorConfigData.Hint")">
						<i class="fa fa-refresh"></i>&nbsp;@T("Plugins.Admin.Debitoor.ButtonRefreshDebitoorConfigData")
					</button>
				</td>
			</tr>
		}
		
		<tr class="adminSeparator">
			<td colspan="2">
				<div class="admin-config-group">
					<div class="title">
						@T("Plugins.Admin.Debitoor.ConfigGroupDataExchange")
					</div>
				</div>
			</td>
		</tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.AddOrderNotes)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.AddOrderNotes)
                @Html.ValidationMessageFor(model => model.AddOrderNotes)
            </td>
        </tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.DefaultCountryCode)
			</td>
			<td class="adminData">
				@Html.SettingOverrideCheckbox(model => model.DefaultCountryCode)
				@Html.DropDownListFor(model => model.DefaultCountryCode, Model.AvailableCountries)
				@Html.ValidationMessageFor(model => model.DefaultCountryCode)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.AddressFormat)
			</td>
			<td class="adminData">
				@Html.SettingOverrideCheckbox(model => model.AddressFormat)
				@Html.DropDownListFor(model => model.AddressFormat, Model.AvailableAddressFormat)
				@Html.ValidationMessageFor(model => model.AddressFormat)
			</td>
		</tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.PriceDisplayType)
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.PriceDisplayType, Model.AvailablePriceDisplayTypes)
                @Html.ValidationMessageFor(model => model.PriceDisplayType)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.InvoiceNotes)
            </td>
            <td class="adminData">
				@Html.SettingOverrideCheckbox(model => model.InvoiceNotes)
                @Html.DropDownListFor(model => model.InvoiceNotes, Model.AvailableInvoiceNotes)
                @Html.ValidationMessageFor(model => model.InvoiceNotes)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.InvoiceAdditionalNotes)
            </td>
            <td class="adminData">
				@Html.SettingOverrideCheckbox(model => model.InvoiceAdditionalNotes)
                @Html.TextAreaFor(model => model.InvoiceAdditionalNotes)
                @Html.ValidationMessageFor(model => model.InvoiceAdditionalNotes)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.AddCustomers)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.AddCustomers)
                @Html.ValidationMessageFor(model => model.AddCustomers)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.AddProducts)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.AddProducts)
                @Html.ValidationMessageFor(model => model.AddProducts)
            </td>
        </tr>
        <tr class="debitoor-add-product">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.ProductPriceType)
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.ProductPriceType, Model.AvailableProductPriceTypes)
                @Html.ValidationMessageFor(model => model.ProductPriceType)
            </td>
        </tr>
        <tr class="debitoor-add-product">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.NetProductCostPrices)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.NetProductCostPrices)
                @Html.ValidationMessageFor(model => model.NetProductCostPrices)
            </td>
        </tr>

		<tr class="adminSeparator">
			<td colspan="2">
				<div class="admin-config-group">
					<div class="title">
						@T("Plugins.Admin.Debitoor.ConfigGroupOtherOptions")
					</div>
				</div>
			</td>
		</tr>
		@if (Model.Token.HasValue())
		{
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.ReversePaid)
				</td>
				<td class="adminData">
					@if (Model.ReversePaid > 0)
					{
						<span class="debitoor-reserved-paid">
							@Html.DisplayFor(model => model.ReversePaid)
						</span>
						<a href="@Model.ReversePaidUrl" class="btn btn-warning" 
						   data-ask="@(T("Plugins.Admin.Debitoor.ReversePaid.Process").Text)?" 
						   data-note="@T("Plugins.Admin.Debitoor.LongRunning").Text"
						   onclick="return debitoor.reversePaid(this);">
							<i class="fa fa-exchange"></i>&nbsp;@T("Plugins.Admin.Debitoor.ReversePaid.Process")
						</a>
					}
					else
					{
						@Html.DisplayFor(model => model.ReversePaid)
					}
				</td>
			</tr>
		}
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.ReflectOrderUpdate)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.ReflectOrderUpdate)
                @Html.ValidationMessageFor(model => model.ReflectOrderUpdate)
            </td>
        </tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.VerifyInvoiceTotal)
			</td>
			<td class="adminData">
				@Html.SettingEditorFor(model => model.VerifyInvoiceTotal)
				@Html.ValidationMessageFor(model => model.VerifyInvoiceTotal)
			</td>
		</tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.BookPaidInvoices)
            </td>
            <td class="adminData">
                @Html.SettingEditorFor(model => model.BookPaidInvoices)
                @Html.ValidationMessageFor(model => model.BookPaidInvoices)
            </td>
        </tr>
		<tr class="debitoor-emailinvoice">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.BookPaidInvoicesAndEmail)
			</td>
			<td class="adminData">
				@Html.SettingEditorFor(model => model.BookPaidInvoicesAndEmail)
				@Html.ValidationMessageFor(model => model.BookPaidInvoicesAndEmail)
			</td>
		</tr>
		<tr class="debitoor-emailinvoice debitoor-emailinvoice-option">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.AttachPdf)
			</td>
			<td class="adminData">
				@Html.SettingEditorFor(model => model.AttachPdf)
				@Html.ValidationMessageFor(model => model.AttachPdf)
			</td>
		</tr>
		<tr class="debitoor-emailinvoice debitoor-emailinvoice-option">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.CopyMail)
			</td>
			<td class="adminData">
				@Html.SettingEditorFor(model => model.CopyMail)
				@Html.ValidationMessageFor(model => model.CopyMail)
			</td>
		</tr>

		<tr class="debitoor-emailinvoice debitoor-emailinvoice-option">
			<td colspan="2">
			
				@(Html.LocalizedEditor<DebitoorConfigModel, EmailInvoiceLocalizedModel>("email-invoice-locales",
					@<table class="adminContent">
						<tr>
							<td class="adminTitle">
								@Html.SmartLabelFor(model => model.Locales[item].EmailSubject)
							</td>
							<td class="adminData">
								@Html.TextBoxFor(model => Model.Locales[item].EmailSubject, new { @class = "input-large" })
								@Html.ValidationMessageFor(model => model.Locales[item].EmailSubject)
							</td>
						</tr>
						<tr>
							<td class="adminTitle">
								@Html.SmartLabelFor(model => model.Locales[item].EmailMessage)
							</td>
							<td class="adminData">
								@Html.TextAreaFor(model => model.Locales[item].EmailMessage, new { @class = "input-large" })
								@Html.ValidationMessageFor(model => model.Locales[item].EmailMessage)
							</td>
						</tr>
						<tr>
							<td colspan="2">
								@Html.HiddenFor(model => model.Locales[item].LanguageId)
							</td>
						</tr>
					</table>
					,
					@<table class="adminContent">
						<tr>
							<td class="adminTitle">
								@Html.SmartLabelFor(model => model.EmailSubject)
							</td>
							<td class="adminData">
								@Html.TextBoxFor(model => model.EmailSubject, new { @class = "input-large" })
								@Html.ValidationMessageFor(model => model.EmailSubject)
							</td>
						</tr>
						<tr>
							<td class="adminTitle">
								@Html.SmartLabelFor(model => model.EmailMessage)
							</td>
							<td class="adminData">
								@Html.TextAreaFor(x => x.EmailMessage, new { @class = "input-large" })
								@Html.ValidationMessageFor(model => model.EmailMessage)
							</td>
						</tr>
					</table>
				))

			</td>
		</tr>

        <tr>
            <td class="adminTitle">&nbsp;</td>
            <td class="adminData">
                <button type="submit" name="save" value="save" class="btn btn-primary">
                    <i class="fa fa-check"></i>&nbsp;@T("Admin.Common.Save")
                </button>

				@if (Model.MappingRecords > 0)
				{
					<a href="@Model.DeleteAllUrl" class="btn btn-danger" onclick="return confirm('@T("Plugins.Admin.Debitoor.DeleteAll.Confirm").Text');">
						<i class="fa fa-trash-o"></i>&nbsp;@T("Admin.Common.Delete")
					</a>
				}
            </td>
        </tr>
    </table>
}

<script type="text/javascript">
    jQuery(document).ready(function () {
    	debitoor.init();
    });
</script>
