@using SmartStore.Web.Framework;
@using SmartStore.Web.Framework.UI;
@using SmartStore.Payone.Models;
@using SmartStore.Payone.Services;
@model ConfigurationModel
@{
    Layout = "";
	Html.AddCssFileParts(true, Url.Content("~/Plugins/SmartStore.Payone/Content/SmartStore.payone.css"));
	Html.AddScriptParts(true, Url.Content("~/Plugins/SmartStore.Payone/Scripts/SmartStore.payone.js"));
}

<div class="plugin-configuration">
	<div>
		<div class="alert alert-info">
			<button class="close" data-dismiss="alert">×</button>
			@Html.Raw(@T("Plugins.SmartStore.Payone.AdminInstruction"))
		</div>
		<div id="AdminInstructionCss" class="alert alert-info@(Model.EnterPaymentDataInCheckout ? " hide" : "")">
			<button class="close" data-dismiss="alert">×</button>
			@Html.Raw(@T("Plugins.SmartStore.Payone.AdminInstructionCss"))
		</div>
	</div>
	<div>
		<a href="http://www.payone.de/" target="_blank">
			<img src="@Url.Content("~/Plugins/SmartStore.Payone/Content/branding.png")" alt="Payone" class="config-logo" />
		</a>
	</div>
</div>

@Html.Action("StoreScopeConfiguration", "Setting", new { area = "Admin" })

@Html.ValidationSummary(false)

@using (Html.BeginForm())
{
	<input type="hidden" name="systemName" id="systemName" value="@Model.SystemName" />
	
	<table id="PayoneConfigTable" class="adminContent">
		<tr>
			<td colspan="2">
				<div class="admin-config-group">
					<div class="title">
						@Model.ConfigGroups.SafeGet(0)
					</div>
				</div>
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.SuccessUrl)
			</td>
			<td class="adminData">
				@Html.DisplayFor(model => model.SuccessUrl)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.BackUrl)
			</td>
			<td class="adminData">
				@Html.DisplayFor(model => model.BackUrl)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.TransactionStatusUrl)
			</td>
			<td class="adminData">
				@Html.DisplayFor(model => model.TransactionStatusUrl)
			</td>
		</tr>

		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.MerchantId)
			</td>
			<td class="adminData">
				@Html.SettingEditorFor(model => model.MerchantId)
				@Html.ValidationMessageFor(model => model.MerchantId)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.PortalId)
			</td>
			<td class="adminData">
				@Html.SettingEditorFor(model => model.PortalId)
				@Html.ValidationMessageFor(model => model.PortalId)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.SubAccountId)
			</td>
			<td class="adminData">
				@Html.SettingEditorFor(model => model.SubAccountId)
				@Html.ValidationMessageFor(model => model.SubAccountId)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.SecurityKey)
			</td>
			<td class="adminData">
				@Html.SettingEditorFor(model => model.SecurityKey)
				@Html.ValidationMessageFor(model => model.SecurityKey)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.UseSandbox)
			</td>
			<td class="adminData">
				@Html.SettingEditorFor(model => model.UseSandbox)
				@Html.ValidationMessageFor(model => model.UseSandbox)
			</td>
		</tr>

		<tr class="adminSeparator">
			<td colspan="2">
				<div class="admin-config-group">
					<div class="title">
						@Model.ConfigGroups.SafeGet(1)
					</div>
				</div>
			</td>
		</tr>
		@if (Model.TransactionTypes != null)
		{
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.TransactionType)
				</td>
				<td class="adminData">
					@Html.SettingOverrideCheckbox(model => model.TransactionType)
					@Html.DropDownListFor(model => model.TransactionType, Model.TransactionTypes)
					@Html.ValidationMessageFor(model => model.TransactionType)
				</td>
			</tr>
		}
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.AddOrderNotes)
			</td>
			<td class="adminData">
				@Html.SettingEditorFor(model => model.AddOrderNotes)
				@Html.ValidationMessageFor(model => model.AddOrderNotes)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.CheckIp)
			</td>
			<td class="adminData">
				@Html.SettingEditorFor(model => model.CheckIp)
				@Html.ValidationMessageFor(model => model.CheckIp)
			</td>
		</tr>

		<tr class="adminSeparator">
			<td colspan="2">
				<div class="admin-config-group">
					<div class="title">
						@Model.ConfigGroups.SafeGet(2)
					</div>
				</div>
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.EnterPaymentDataInCheckout)
			</td>
			<td class="adminData">
				@Html.SettingEditorFor(model => model.EnterPaymentDataInCheckout)
				@Html.ValidationMessageFor(model => model.EnterPaymentDataInCheckout)
			</td>
		</tr>
		@if (Model.AvailableCreditCards != null)
		{
			<tr class="checkout-data-options">
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.ExcludedCreditCards)
				</td>
				<td class="adminData">
					<input type="hidden" name="newExcludedCreditCards" value="@Model.ExcludedCreditCards.EmptyNull()" />

					@Html.SettingOverrideCheckbox(model => model.ExcludedCreditCards)
					@Html.DropDownListFor(model => model.ExcludedCreditCards, Model.AvailableCreditCards, null, new { multiple = "multiple" })
					@Html.ValidationMessageFor(model => model.ExcludedCreditCards)
				</td>
			</tr>
		}
		@if (Model.AvailableOnlineBankTransferTypes != null)
		{
			<tr class="checkout-data-options">
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.ExcludedOnlineBankTransferTypes)
				</td>
				<td class="adminData">
					<input type="hidden" name="newExcludedOnlineBankTransferTypes" value="@Model.ExcludedOnlineBankTransferTypes.EmptyNull()" />

					@Html.SettingOverrideCheckbox(model => model.ExcludedOnlineBankTransferTypes)
					@Html.DropDownListFor(model => model.ExcludedOnlineBankTransferTypes, Model.AvailableOnlineBankTransferTypes, null, new { multiple = "multiple" })
					@Html.ValidationMessageFor(model => model.ExcludedOnlineBankTransferTypes)
				</td>
			</tr>
		}
		@if (Model.AvailableCodShippingProviders != null)
		{
			<tr class="checkout-data-options">
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.CodShippingProvider)
				</td>
				<td class="adminData">
					@Html.SettingOverrideCheckbox(model => model.CodShippingProvider)
					@Html.DropDownListFor(model => model.CodShippingProvider, Model.AvailableCodShippingProviders)
					@Html.ValidationMessageFor(model => model.CodShippingProvider)
				</td>
			</tr>
		}
		@if (Model.SystemName == PayoneCore.SystemNameDirectDebit)
		{
			<tr class="checkout-data-options">
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.EnableSepaMandate)
				</td>
				<td class="adminData">
					@Html.SettingEditorFor(model => model.EnableSepaMandate)
					@Html.ValidationMessageFor(model => model.EnableSepaMandate)
				</td>
			</tr>
		}
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.AdditionalFee)
			</td>
			<td class="adminData">
				@Html.SettingEditorFor(model => model.AdditionalFee)
				@Html.ValidationMessageFor(model => model.AdditionalFee)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.AdditionalFeePercentage)
			</td>
			<td class="adminData">
				@Html.SettingEditorFor(model => model.AdditionalFeePercentage)
				@Html.ValidationMessageFor(model => model.AdditionalFeePercentage)
			</td>
		</tr>
		@if (Model.AdditionalFeeWarning.HasValue())
		{
			<tr id="AdditionalFeeWarning">
				<td colspan="2">
					<div class="alert alert-warning">
						@Model.AdditionalFeeWarning
					</div>
				</td>
			</tr>
		}

		<tr>
			<td class="adminTitle">&nbsp;</td>
			<td class="adminData">
				<button id="SaveConfigButton" type="submit" name="save" class="btn btn-primary" value="save">
					<i class="fa fa-check"></i>&nbsp;@T("Admin.Common.Save")
				</button>
			</td>
		</tr>
	</table>
}

<script type="text/javascript">
	jQuery(document).ready(function () {
		payone.init('@Model.SystemName');
	});
</script>