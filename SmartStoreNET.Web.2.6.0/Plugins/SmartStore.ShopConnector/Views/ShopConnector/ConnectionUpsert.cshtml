@using SmartStore.ShopConnector;
@using SmartStore.ShopConnector.Models;
@using SmartStore.ShopConnector.Core;
@model ConnectionModel
@{
    Layout = null;
}

<div class="operation-state"></div>

<div>
	<form method="POST" class="connection-form" action="@Url.Action("ConnectionUpsert", "ShopConnector", new { area = ShopConnectorCore.SystemName })">

		<input type="hidden" id="Id" name="Id" value="@Model.Id" />
		<input type="hidden" id="IsForExport" name="IsForExport" value="@Model.IsForExport.ToString()" />

		<table class="adminContent">
			@if (Model.Id != 0)
			{
				<tr>
					<td class="adminTitle">
						@Html.SmartLabelFor(model => model.IsActive)
					</td>
					<td class="adminData">
						@Html.EditorFor(model => model.IsActive)
					</td>
				</tr>
			}

			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.Url)
				</td>
				<td class="adminData">
					@Html.EditorFor(model => model.Url)
				</td>
			</tr>

			@if (Model.KeysRequired)
			{
				<tr>
					<td class="adminTitle">
						@Html.SmartLabelFor(model => model.PublicKey)
					</td>
					<td class="adminData">
						@Html.EditorFor(model => model.PublicKey)
					</td>
				</tr>
				<tr>
					<td class="adminTitle">
						@Html.SmartLabelFor(model => model.SecretKey)
					</td>
					<td class="adminData">
						@Html.EditorFor(model => model.SecretKey)
					</td>
				</tr>
			}
									
			@if (Model.IsForExport)
			{
				<tr>
					<td class="adminTitle">
						@Html.SmartLabelFor(model => model.LimitedToManufacturerIds)
					</td>
					<td class="adminData">
						<input type="hidden" name="NewLimitedToManufacturerIds" id="NewLimitedToManufacturerIds" value="@Model.LimitedToManufacturerIds.EmptyNull()" />
						@Html.DropDownListFor(model => model.LimitedToManufacturerIds, Model.AvailableManufacturers, null, new { multiple = "multiple" })
					</td>
				</tr>
			}
			
			@if (Model.CreatedOn.HasValue)
			{
				<tr>
					<td class="adminTitle">
						@Html.SmartLabelFor(model => model.CreatedOn)
					</td>
					<td class="adminData">
						@Html.DisplayFor(model => model.CreatedOn)
					</td>
				</tr>
			}
			@if (Model.UpdatedOn.HasValue)
			{
				<tr>
					<td class="adminTitle">
						@Html.SmartLabelFor(model => model.UpdatedOn)
					</td>
					<td class="adminData">
						@Html.DisplayFor(model => model.UpdatedOn)
					</td>
				</tr>
			}

			@*@if (Model.IsForExport)
			{
				<tr>
					<td class="adminTitle">
						@Html.SmartLabelFor(model => model.LimitedToStores)
					</td>
					<td class="adminData">
						@Html.EditorFor(model => model.LimitedToStores)
					</td>
				</tr>
				<tr id="pnl-available-stores">
					<td class="adminTitle">
						@Html.SmartLabelFor(model => model.AvailableStores)
					</td>
					<td class="adminData">
						@if (Model.AvailableStores != null && Model.AvailableStores.Count > 0)
						{
							foreach (var store in Model.AvailableStores)
							{
								<label class="checkbox">
									<input type="checkbox" name="SelectedStoreIds" value="@store.Id" checked="@(Model.SelectedStoreIds != null && Model.SelectedStoreIds.Contains(store.Id))" />
									<span>@store.Name</span>
								</label>
							}
						}
						else
						{
							<div>@T("Admin.Configuration.Stores.NoStoresDefined")</div>
						}
					</td>
				</tr>
			}*@
		</table>
	</form>
</div>

@*<script type="text/javascript">
	$(function () {

		$("#@Html.FieldIdFor(model => model.LimitedToStores)").change(function () {
			$('#pnl-available-stores').toggle($(this).is(':checked'));
		}).trigger('change');

	});
</script>*@