@using SmartStore.Web.Framework;
@using SmartStore.Web.Framework.UI;
@using SmartStore.Viveum;
@using SmartStore.Viveum.Models;
@model ConfigurationModel
@{
    Layout = "";
}

<div class="plugin-configuration">
	<div>
		<div class="alert alert-info">
			<button class="close" data-dismiss="alert">&#215;</button>
			@Html.Raw(@T("Plugins.SmartStore.Viveum.AdminInstruction"))
		</div>
	</div>
	<div>
		<a href="http://www.viveum.com/" target="_blank">
			<img src="@Url.Content("~/Plugins/SmartStore.Viveum/Content/branding.png")" alt="Viveum" />
		</a>
	</div>
</div>

@Html.Action("StoreScopeConfiguration", "Setting", new { area = "Admin" })

@Html.ValidationSummary(false)

@using (Html.BeginForm())
{
	<table id="ViveumConfigTable" class="adminContent">
		<tr>
			<td colspan="2">
				<div class="admin-config-group">
					<div class="title">
						@Model.ConfigGroups.SafeGet(0)
					</div>
				</div>
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.ApiUserId)
			</td>
			<td class="adminData">
				@Html.SettingEditorFor(model => model.ApiUserId)
				@Html.ValidationMessageFor(model => model.ApiUserId)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.ApiPassword)
			</td>
			<td class="adminData">
				@Html.SettingEditorFor(model => model.ApiPassword)
				@Html.ValidationMessageFor(model => model.ApiPassword)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.ApiEntityId)
			</td>
			<td class="adminData">
				@Html.SettingEditorFor(model => model.ApiEntityId)
				@Html.ValidationMessageFor(model => model.ApiEntityId)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.UseSandbox)
			</td>
			<td class="adminData">
				@Html.SettingEditorFor(model => model.UseSandbox)
				@Html.ValidationMessageFor(model => model.UseSandbox)
			</td>
		</tr>
		<tr class="adminSeparator">
			<td colspan="2">
				<div class="admin-config-group">
					<div class="title">
						@Model.ConfigGroups.SafeGet(1)
					</div>
				</div>
			</td>
		</tr>
		@if (Model.SystemName != ViveumOnlineBankTransferProvider.SystemName)
		{
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.TransactionType)
				</td>
				<td class="adminData">
					@Html.SettingOverrideCheckbox(model => model.TransactionType)
					@Html.DropDownListFor(model => model.TransactionType, Model.AvailableTransactionTypes)
					@Html.ValidationMessageFor(model => model.TransactionType)
				</td>
			</tr>
		}
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.ValidatePayment)
			</td>
			<td class="adminData">
				@Html.SettingEditorFor(model => model.ValidatePayment)
				@Html.ValidationMessageFor(model => model.ValidatePayment)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.AddOrderNotes)
			</td>
			<td class="adminData">
				@Html.SettingEditorFor(model => model.AddOrderNotes)
				@Html.ValidationMessageFor(model => model.AddOrderNotes)
			</td>
		</tr>
		<tr class="adminSeparator">
			<td colspan="2">
				<div class="admin-config-group">
					<div class="title">
						@Model.ConfigGroups.SafeGet(2)
					</div>
				</div>
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.PaymentBrands)
			</td>
			<td class="adminData">
				@Html.SettingOverrideCheckbox(model => model.PaymentBrands)

				@*merchant must be able to influence the stored order*@
				<select class="control-xlarge" multiple="multiple" name="@Html.FieldNameFor(x => x.PaymentBrands)" id="@Html.FieldIdFor(x => x.PaymentBrands)">
					@foreach (var value in Model.PaymentBrands)
					{
						var availableItem = Model.AvailablePaymentBrands.FirstOrDefault(x => x.Value == value);
						<option value="@value" selected="selected">@(availableItem != null ? availableItem.Text : value)</option>
					}
					@foreach (var item in Model.AvailablePaymentBrands.OrderBy(x => x.Type).ThenBy(x => x.Text))
					{
						if (!Model.PaymentBrands.Any(x => x == item.Value))
						{
							<option value="@item.Value">@item.Text</option>
						}
					}
				</select>

				@Html.ValidationMessageFor(model => model.PaymentBrands)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.WidgetStyle)
			</td>
			<td class="adminData">
				@Html.SettingOverrideCheckbox(model => model.WidgetStyle)
				@Html.DropDownListFor(model => model.WidgetStyle, new List<SelectListItem>()
				{
					new SelectListItem { Text = @T("Plugins.SmartStore.Viveum.WidgetStyleCard"), Value = "card" },
					new SelectListItem { Text = @T("Plugins.SmartStore.Viveum.WidgetStylePlain"), Value = "plain" }
				})
				@Html.ValidationMessageFor(model => model.WidgetStyle)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.WidgetFrameMinHeight)
			</td>
			<td class="adminData">
				@Html.SettingEditorFor(model => model.WidgetFrameMinHeight)
				@Html.ValidationMessageFor(model => model.WidgetFrameMinHeight)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.SetWidgetBackgroundColor)
			</td>
			<td class="adminData">
				@Html.SettingEditorFor(model => model.SetWidgetBackgroundColor)
				@Html.ValidationMessageFor(model => model.SetWidgetBackgroundColor)
			</td>
		</tr>
		<tr class="widget-background-color">
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.WidgetBackgroundColor)
			</td>
			<td class="adminData">
				@Html.SettingOverrideCheckbox(model => model.WidgetBackgroundColor)
				@Html.EditorFor(model => model.WidgetBackgroundColor, "Color")
				@Html.ValidationMessageFor(model => model.WidgetBackgroundColor)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.AdditionalFee)
			</td>
			<td class="adminData">
				@Html.SettingEditorFor(model => model.AdditionalFee)
				@Html.ValidationMessageFor(model => model.AdditionalFee)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.AdditionalFeePercentage)
			</td>
			<td class="adminData">
				@Html.SettingEditorFor(model => model.AdditionalFeePercentage)
				@Html.ValidationMessageFor(model => model.AdditionalFeePercentage)
			</td>
		</tr>

		<tr>
			<td class="adminTitle">&nbsp;</td>
			<td class="adminData">
				<button id="SaveConfigButton" type="submit" name="save" class="btn btn-primary" value="save">
					<i class="fa fa-check"></i>&nbsp;@T("Admin.Common.Save")
				</button>
			</td>
		</tr>
	</table>
}

<script type="text/javascript">
	jQuery(document).ready(function () {

		// show/hide widget background color
		$('#@(Html.FieldIdFor(x => x.SetWidgetBackgroundColor))').change(function () {
			$('#ViveumConfigTable').find('.widget-background-color').toggle($(this).is(':checked'));
		}).trigger('change');

	});
</script>